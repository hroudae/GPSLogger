/*
 * File: lcd.h
 * Purpose: Declares all functions and stucts pertaining to the setup and
 *          communication with the Nokia 5110 LCD Screen. All communication
 *          is via SPI2 using GPIOB pins.
 */
#ifndef __LCD_H
#define __LCD_H

#include "pinconfig.h"

// some command bytes
#define COMMAND_DISPLAY_FILL  0x09
#define COMMAND_DISPLAY_INVERSE 0x0D
#define COMMAND_DISPLAY_NORMAL 0x0C
#define COMMAND_EXTENDED_INSTRUCTION 0x21

#define COMMAND_RESET_X 0x80
#define COMMAND_RESET_Y 0x40

/*
 * Table that converts a char to LCD display, starting with the Space (' ') character
 * ascii_to_lcd[c - ' '] will get the LCD data sequence for character c
 * each is 5 columns x 8 rows on the LCD
 */
static uint8_t ascii_to_lcd[][5] = {
    { 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0x20 Space
    { 0x00, 0x00, 0xBE, 0x00, 0x00 }, // 0x21 !
    { 0x00, 0x06, 0x00, 0x06, 0x00 }, // 0x22 "
    { 0x44, 0xfe, 0x44, 0xfe, 0x44 }, // 0x23 #
    { 0x5c, 0x54, 0xfe, 0x54, 0x74 }, // 0x24 $
    { 0x44, 0x20, 0x10, 0x08, 0x44 }, // 0x25 %
    { 0x6c, 0x92, 0xb2, 0x4c, 0xa0 }, // 0x26 &
    { 0x00, 0x00, 0x06, 0x00, 0x00 }, // 0x27 '
    { 0x00, 0x38, 0x44, 0x82, 0x00 }, // 0x28 (
    { 0x00, 0x82, 0x44, 0x38, 0x00 }, // 0x29 )
    { 0x28, 0x10, 0x7c, 0x10, 0x28 }, // 0x2a *
    { 0x10, 0x10, 0x7c, 0x10, 0x10 }, // 0x2b +
    { 0x00, 0xb0, 0x70, 0x00, 0x00 }, // 0x2c ,
    { 0x10, 0x10, 0x10, 0x10, 0x10 }, // 0x2d -
    { 0x00, 0xc0, 0xc0, 0x00, 0x00 }, // 0x2e .
    { 0xc0, 0x60, 0x38, 0x0c, 0x06 }, // 0x2f /
    { 0x7c, 0xc2, 0xba, 0x86, 0x7c }, // 0x30 0
    { 0x84, 0x84, 0xFE, 0x80, 0x80 }, // 0x31 1
    { 0xC4, 0xA2, 0x92, 0x8C, 0x00 }, // 0x32 2
    { 0x82, 0x92, 0x92, 0x6C, 0x00 }, // 0x33 3
    { 0x1E, 0x10, 0xFE, 0x10, 0x00 }, // 0x34 4
    { 0x9E, 0x92, 0x92, 0x62, 0x00 }, // 0x35 5
    { 0xFE, 0x92, 0x92, 0xF2, 0x00 }, // 0x36 6
    { 0x02, 0xC2, 0x32, 0x0E, 0x00 }, // 0x37 7
    { 0x6C, 0x92, 0x92, 0x6C, 0x00 }, // 0x38 8
    { 0x9E, 0x92, 0x92, 0xFE, 0x00 }, // 0x39 9
    { 0x00, 0x66, 0x66, 0x00, 0x00 }, // 0x3a :
    { 0x00, 0xB6, 0x76, 0x00, 0x00 }, // 0x3b ;
    { 0x00, 0x10, 0x28, 0x44, 0x00 }, // 0x3c <
    { 0x28, 0x28, 0x28, 0x28, 0x28 }, // 0x3d =
    { 0x00, 0x44, 0x28, 0x10, 0x00 }, // 0x3e >
    { 0x04, 0x02, 0xA2, 0x12, 0x0C }, // 0x3f ?
    { 0x3C, 0x5A, 0x9A, 0xA2, 0x1C }, // 0x40 @
    { 0xF8, 0x24, 0x22, 0x24, 0xF8 }, // 0x41 A
    { 0xFE, 0x92, 0x92, 0x92, 0x6C }, // 0x42 B
    { 0x38, 0x44, 0x82, 0x82, 0x82 }, // 0x43 C
    { 0xFE, 0x82, 0x82, 0x44, 0x38 }, // 0x44 D
    { 0xFE, 0x92, 0x92, 0x82, 0x00 }, // 0x45 E
    { 0xFE, 0x12, 0x12, 0x02, 0x00 }, // 0x46 F
    { 0x7C, 0x82, 0x82, 0x92, 0x74 }, // 0x47 G
    { 0xFE, 0x10, 0x10, 0x10, 0xFE }, // 0x48 H
    { 0x82, 0x82, 0xFE, 0x82, 0x82 }, // 0x49 I
    { 0x42, 0x82, 0x7E, 0x02, 0x02 }, // 0x4a J
    { 0xFE, 0x10, 0x28, 0x44, 0x82 }, // 0x4b K
    { 0xFE, 0x80, 0x80, 0x80, 0x80 }, // 0x4c L
    { 0xFE, 0x04, 0x08, 0x04, 0xFE }, // 0x4d M
    { 0xFE, 0x0C, 0x10, 0x60, 0xFE }, // 0x4e N
    { 0x7C, 0x82, 0x82, 0x82, 0x7C }, // 0x4f O
    { 0xFE, 0x12, 0x12, 0x12, 0x0C }, // 0x50 P
    { 0x7C, 0x82, 0xA2, 0x42, 0xBC }, // 0x51 Q
    { 0xFE, 0x12, 0x32, 0x52, 0x8C }, // 0x52 R
    { 0x4C, 0x92, 0x92, 0x92, 0x64 }, // 0x53 S
    { 0x02, 0x02, 0xFE, 0x02, 0x02 }, // 0x54 T
    { 0x7E, 0x80, 0x80, 0x80, 0x7E }, // 0x55 U
    { 0x1E, 0x70, 0xC0, 0x70, 0x1E }, // 0x56 V
    { 0x7E, 0x80, 0x70, 0x80, 0x7E }, // 0x57 W
    { 0xC6, 0x6C, 0x38, 0x6C, 0xC6 }, // 0x58 X
    { 0x06, 0x08, 0xF0, 0x08, 0x06 }, // 0x59 Y
    { 0xC2, 0xA2, 0x92, 0x8A, 0x86 }, // 0x5a Z
    { 0x00, 0xFE, 0x82, 0x82, 0x00 }, // 0x5b [
    { 0x06, 0x0C, 0x38, 0x60, 0xC0 }, // 0x5c '\'
    { 0x00, 0x82, 0x82, 0xFE, 0x00 }, // 0x5d ]
    { 0x08, 0x04, 0x02, 0x04, 0x08 }, // 0x5e ^
    { 0x80, 0x80, 0x80, 0x80, 0x80 }, // 0x5f _
    { 0x00, 0x02, 0x04, 0x00, 0x00 }, // 0x60 `
    { 0x40, 0xA8, 0xA8, 0xF0, 0x80 }, // 0x61 a
    { 0xFE, 0x90, 0x90, 0x60, 0x00 }, // 0x62 b
    { 0x70, 0x88, 0x88, 0x88, 0x00 }, // 0x63 c
    { 0x60, 0x90, 0x90, 0xFE, 0x00 }, // 0x64 d
    { 0x78, 0x94, 0x94, 0x94, 0x58 }, // 0x65 e
    { 0x10, 0xFC, 0x12, 0x02, 0x00 }, // 0x66 f
    { 0x10, 0xA8, 0xA8, 0xA8, 0x50 }, // 0x67 g
    { 0xFE, 0x10, 0x10, 0x10, 0xF0 }, // 0x68 h
    { 0x00, 0x00, 0xE8, 0x00, 0x00 }, // 0x69 i
    { 0x40, 0x80, 0x74, 0x00, 0x00 }, // 0x6a j
    { 0xFE, 0x20, 0x50, 0x80, 0x00 }, // 0x6b k
    { 0x00, 0x82, 0xFE, 0x80, 0x00 }, // 0x6c l
    { 0xE0, 0x10, 0x60, 0x10, 0xE0 }, // 0x6d m
    { 0xF0, 0x20, 0x20, 0xC0, 0x00 }, // 0x6e n
    { 0x70, 0x88, 0x88, 0x88, 0x70 }, // 0x6f o
    { 0xF8, 0x28, 0x28, 0x10, 0x00 }, // 0x70 p
    { 0x10, 0x28, 0x28, 0xF8, 0x80 }, // 0x71 q
    { 0xF8, 0x10, 0x10, 0x20, 0x00 }, // 0x72 r
    { 0x10, 0xA8, 0xA8, 0xA8, 0x40 }, // 0x73 s
    { 0x08, 0x08, 0x7E, 0x88, 0x48 }, // 0x74 t
    { 0x70, 0x80, 0x80, 0xF0, 0x80 }, // 0x75 u
    { 0x30, 0x40, 0x80, 0x40, 0x30 }, // 0x76 v
    { 0x70, 0x80, 0x60, 0x80, 0x70 }, // 0x77 w
    { 0x88, 0x50, 0x20, 0x50, 0x88 }, // 0x78 x
    { 0x18, 0xA0, 0xA0, 0xA0, 0x78 }, // 0x79 y
    { 0x00, 0xC8, 0xA8, 0x98, 0x00 }, // 0x7a z
    { 0x10, 0x6C, 0x82, 0x82, 0x00 }, // 0x7b {
    { 0x00, 0x00, 0xFE, 0x00, 0x00 }, // 0x7c |
    { 0x00, 0x82, 0x82, 0x6C, 0x10 }, // 0x7d }
};
  
// Holds which GPIOB pins communicate with LCD
typedef struct {						// Pin Numbers on LCD
    uint8_t sclk;							// Pin 7, SCLK - SPI Pin
    uint8_t data_in;					// Pin 6, DN(MOSI) - SPI Pin
    uint8_t chip_select;			// Pin 3, SCE - active low
    uint8_t mode_select;			// Pin 5, D/C - command low, data high
    uint8_t reset;						// Pin 4, RST - active low
} LCD;

void LCD_Setup(LCD *screen);

// Functions for sending bytes
void LCD_SendByte(char c);
void LCD_SendCommand(char c);
void LCD_SendData(char c);

// command functions
void LCD_Startup(void);
void LCD_ClearDisplay(void);
void LCD_ClearRow(uint8_t y, uint8_t x);
void LCD_InverseDisplay(void);
void LCD_NormalDisplay(void);
void LCD_ResetX(void);
void LCD_ResetY(void);
void LCD_Reset(void);
void LCD_SetX(uint8_t x);
void LCD_SetY(uint8_t y);

// printing characters on the screen
void LCD_PrintCharacter(char c);
void LCD_PrintString(char* str, int sz);
void LCD_PrintAll(void);
void LCD_PrintStringCentered(char* str, uint8_t sz);

uint8_t uintToStr(char* buf, uint16_t dist);


#endif /* __LCD_H */
